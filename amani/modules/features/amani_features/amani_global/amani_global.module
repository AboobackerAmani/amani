<?php
/**
 * @file
 * Code for the Amani: Global feature.
 */

include_once 'amani_global.features.inc';

/**
 * Implements hook_menu().
 */
function amani_global_menu() {

  $items['home'] = array(
    'title' => 'Home Page',
    'description' => 'Default home page.',
    'page callback' => 'amani_global_home_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $version = amani_global_get_version();

  $items['admin/configure-amani/site-info'] = array(
    'title' => 'Configure Site Info and Logo',
    'description' => 'Manage site name, e-mail address, slogan, logo and favicon.',
    'page callback' => 'drupal_get_form',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array('amani_site_information_settings'),
    'access arguments' => array('administer site settings'),
    'weight' => 20,
  );

  $items['admin/configure-amani/release-notes'] = array(
    'title' => t('Release Notes', array('!version' => $version)),
    'description' => 'Amani Release Notes',
    'page callback' => 'amani_global_release_notes',
    'access arguments' => array('administer site settings'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function amani_global_permission() {
  return array(
    'administer site settings' => array(
      'title' => t('Administer site settings'),
      'description' => t('Administer the site settings form.'),
    ),
  );
}

/**
 * Home page callback.
 */
function amani_global_home_page() {
  return '';
}

/**
 * Implements hook_block_info().
 */
function amani_global_block_info() {
  return array(
    'add_content_links' => array(
      'info' => t('Amani: add content links')
    ),
    'site_contact_info' => array(
      'info' => t('Amani: site contact info')
    )
  );
}

/**
 * Redirect user to the amani admin page on login.
 */
function amani_global_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    if(count($account->roles) > 1) {
      $_GET['destination'] = 'amani/content-admin';
    }
  }
}

/**
 * Implements hook_block_view().
 */
function amani_global_block_view($delta = '') {
  switch ($delta) {
    case 'add_content_links':
      $block['content'] = amani_global_add_content_links();
      break;
    case 'site_contact_info':
      $block['title'] = 'Where are we?';
      $block['content'] = amani_global_site_contact_info();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_view_alter().
 */
function amani_global_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case 'form':
      $data['content']['search_block_form']['#attributes']['placeholder'] = t('Search');
      break;

  }
}

/**
 * Return html for add_content_links block.
 */
function amani_global_add_content_links() {
  $output = '';

  // Add content links
  $item = menu_get_item('node/add');
  $content = system_admin_menu_block($item);
  if ($content) {
    $output .= '<div><span class="node-type-list">Add new content</span><ul>';
    foreach ($content as $item) {
      $output .= '<li>' . l('Add ' . $item['title'], $item['href'], $item['localized_options']) . '</li>';
    }
    $output .= '</ul><div>';
  }

  return $output;
}

/**
 * Return html for site_contact_info block.
 */
function amani_global_site_contact_info() {
  $output = '';
  $map_id = 'contact_form_map';
  $map = leaflet_framework_map($map_id, array(), array());

  $content = array(
    '' => variable_get('site_address', NULL)
  );
  if ($phone = variable_get('site_phone', NULL)) {
    $content['T: '] = $phone;
  }
  if ($mail = variable_get('site_mail', NULL)) {
    $content['E: '] = $mail;
  }
  if ($hours = variable_get('site_hours', NULL)) {
    $content['Hours: '] = $hours;
  }
  if ($content) {
    $output .= '<div id="contact_form_site_info">';
    foreach ($content as $item => $value) {
      $output .= '<p>'.$item.nl2br($value).'</p>';
    }
    $output .= drupal_render($map);
    $output .='</div>';
  }
  return $output;
}

/**
 * Implements hook_leaflet_framework_plugins().
 */
function amani_global_leaflet_framework_plugins() {
  $plugins['contact_form'] = array(
    'library' => array('amani_global', 'ContactFormMap'),
    'logical' => 'AmaniGlobal.ContactForm',
    'points' => array()
  );

  return $plugins;
}


/**
 * Implementation of hook_requirements().
 */
function amani_global_requirements($phase) {
  if ('runtime' == $phase) {
    if ($version = amani_global_get_version()) {
      // Show version on status report page
      $requirements['amani_version'] = array(
        'title' => t('Amani Version'),
        'value' => $version,
        'severity' => REQUIREMENT_OK,
      );
      return $requirements;
    }
    else {
      // Show error since version not found
      $requirements['amani_version'] = array(
        'title' => t('Amani Version'),
        'value' => t('Amani Version could not be determined'),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }
  }
}


/**
 * Menu callback; Amani Release Notes
 */
function amani_global_release_notes () {
  return nl2br(file_get_contents(drupal_get_path('profile', 'amani') . '/VERSION.txt'));
}

/**
 * Get the Amani version from the VERSION.txt file
 */
function amani_global_get_version() {
  $version_path = drupal_realpath(drupal_get_path('profile', 'amani') . '/VERSION.txt');
  if (file_exists($version_path)) {
    if ($version_file = fopen($version_path, 'r')) {
      if ($version = trim(fgets($version_file))) {
        if (preg_match('/^Amani \d\.\d+/', $version)) {
          return $version;
        }
      }
      // Create watchdog error, could not identify version in VERSION.txt
      watchdog(
        'amani_global',
        'The version could not be determined from the file %file',
        array('%file' => $version_path),
        WATCHDOG_ERROR
      );
      return '';
    }
  }
  // Create watchdog error, could not open VERSION.txt
  watchdog(
    'amani_global',
    'The version could not be determined because the file %file could not be opened',
    array('%file' => $version_path),
    WATCHDOG_ERROR
  );
  return '';
}


/**
 * Implements hook_library().
 */
function amani_global_library() {
  $libararies = array();
  $path = drupal_get_path('module', 'amani_global');
  // Use libraries from pre-existing map implementation.
  $incident_map_path = drupal_get_path('module', 'incident_map');

  $libraries['ContactFormMap'] = array(
    'title' => 'Contact form map visualization',
    'version' => '7.x-1.x',
    'js' => array("$path/js/ContactForm.js" => array()),
  );

  return $libraries;
}

/**
 * Implements hook_leaflet_framework_maps().
 */
function amani_global_leaflet_framework_maps() {
  $maps = array();
  $maps['contact_form_map'] = array(
    'title' => 'Contact Form Map',
    'defaults' => array(
      'height' => '200px'
    ),
    'plugins' => array(
      'lf_layers' => array(),
      'contact_form' => array(
         'points' => array(variable_get('site_address_lat',0.0),variable_get('site_address_long',0.0))
      ),
      'lf_view' => array(
        'center' => array(variable_get('site_address_lat',0.0),variable_get('site_address_long',0.0)),
        'zoom' => 15,
      )
    )
  );

  return $maps;
}

/**
 * Form builder; selected elements from the general site information form
 * and the theme configuration form (logo and favicon upload).
 *
 * @param $key
 *   A theme name.
 * @return
 *   The form structure.
 * @ingroup forms
 * @see system_site_information_settings()
 * @see system_theme_settings_submit()
 */
function amani_site_information_settings($form, &$form_state, $key = 'peace') {

  $form['site_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site details'),
  );
  $form['site_information']['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Site name'),
    '#default_value' => variable_get('site_name', 'Drupal'),
    '#required' => TRUE
  );
  $form['site_information']['site_slogan'] = array(
    '#type' => 'textfield',
    '#title' => t('Tagline'),
    '#default_value' => variable_get('site_slogan', ''),
    '#description' => t("This text will be displayed beside the logo."),
  );
  $form['site_information']['site_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#default_value' => variable_get('site_mail', ini_get('sendmail_from')),
    '#description' => t("The <em>From</em> address in automated e-mails sent during registration and new password requests, and other notifications. (Use an address ending in your site's domain to help prevent this e-mail being flagged as spam.)"),
    '#required' => TRUE,
  );

  $form['site_information']['site_address'] = array(
    '#type' => 'textarea',
    '#title' => t('Address'),
    '#default_value' => variable_get('site_address', NULL),
    '#description' => t("Your organization's mailing address, this will appear on the contact form of your site."),
    '#required' => FALSE,
  );

  $options = array(
    'attributes' => array(
      'class' => array('colorbox-load'),
    ),
    'query' => array(
      'width' => '800',
      'height' => '500',
      'iframe' => 'true',
    ),
  );
  $link = l(t('Convert your address'), 'http://www.latlong.net/convert-address-to-lat-long.html', $options);

  $form['site_information']['site_address_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Lat'),
    '#default_value' => variable_get('site_address_lat', 0.0),
    '#description' => t('Your organizations address latitude. !link', array('!link' => $link)),
    '#required' => FALSE,
  );

  $form['site_information']['site_address_long'] = array(
    '#type' => 'textfield',
    '#title' => t('Long'),
    '#default_value' => variable_get('site_address_long', 0.0),
    '#description' => t('Your organizations address longtitude. !link', array('!link' => $link)),
    '#required' => FALSE,
  );

  $form['site_information']['site_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => variable_get('site_phone', NULL),
    '#description' => t("Your organization's phone number, this will appear on the contact form of your site."),
    '#required' => FALSE,
  );

  $form['site_information']['site_hours'] = array(
    '#type' => 'textfield',
    '#title' => t('Hours of operation'),
    '#default_value' => variable_get('site_hours', NULL),
    '#description' => t("Your organization's hours of operation (ie. mon thru fri 9am-5pm), this will appear on the contact form of your site."),
    '#required' => FALSE,
  );
  $form['var'] = array('#type' => 'hidden', '#value' => 'theme_' . $key . '_settings');

  $form['logo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logo image settings'),
    '#attributes' => array('class' => array('theme-settings-bottom')),
  );

  $form['logo']['default_logo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the default logo'),
    '#default_value' => theme_get_setting('default_logo', $key),
    '#tree' => FALSE,
    '#description' => t('Check here if you want the theme to use the logo supplied with it.')
  );

  $form['logo']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      // Hide the logo settings when using the default logo.
      'invisible' => array(
        'input[name="default_logo"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['logo']['settings']['logo_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to custom logo'),
    '#default_value' => theme_get_setting('logo_path', $key),
    '#access' => FALSE,
  );
  $form['logo']['settings']['logo_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload new logo image'),
    '#maxlength' => 40,
    '#description' => t("Use this field to upload your own logo.")
  );

  $form['favicon'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shortcut icon settings'),
    '#description' => t("Your shortcut icon, or 'favicon', is displayed in the address bar and bookmarks of most browsers."),
  );
  $form['favicon']['default_favicon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the default shortcut icon.'),
    '#default_value' => theme_get_setting('default_favicon', $key),
    '#description' => t('Check here if you want the theme to use the default shortcut icon.')
  );
  $form['favicon']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      // Hide the favicon settings when using the default favicon.
      'invisible' => array(
        'input[name="default_favicon"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['favicon']['settings']['favicon_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to custom icon'),
    '#default_value' => theme_get_setting('favicon_path', $key),
    '#access' => FALSE,
  );
  $form['favicon']['settings']['favicon_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload new icon image'),
    '#description' => t("Use this field to upload your own shortcut icon.")
  );

  // Inject human-friendly values for logo and favicon.
  foreach (array('logo' => 'logo.png', 'favicon' => 'favicon.ico') as $type => $default) {
    if (isset($form[$type]['settings'][$type . '_path'])) {
      $element = &$form[$type]['settings'][$type . '_path'];

      // If path is a public:// URI, display the path relative to the files
      // directory; stream wrappers are not end-user friendly.
      $original_path = $element['#default_value'];
      $friendly_path = NULL;
      if (file_uri_scheme($original_path) == 'public') {
        $friendly_path = file_uri_target($original_path);
        $element['#default_value'] = $friendly_path;
      }
    }
  }


  $form = system_settings_form($form);
  // We don't want to call system_settings_form_submit(), so change #submit.
  array_pop($form['#submit']);
  $form['#submit'][] = 'amani_theme_settings_submit';
  $form['#validate'][] = 'amani_theme_settings_validate';
  return $form;
}

/**
 * Validator for the amani_theme_settings() form.
 */
function amani_theme_settings_validate($form, &$form_state) {
  // Handle file uploads.
  $validators = array('file_validate_is_image' => array());

  // Check for a new uploaded logo.
  $file = file_save_upload('logo_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['logo_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('logo_upload', t('The logo could not be uploaded.'));
    }
  }

  $validators = array('file_validate_extensions' => array('ico png gif jpg jpeg apng svg'));

  // Check for a new uploaded favicon.
  $file = file_save_upload('favicon_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['favicon_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('favicon_upload', t('The favicon could not be uploaded.'));
    }
  }

}

/**
 * Process amani_theme_settings form submissions.
 */
function amani_theme_settings_submit($form, &$form_state) {
  // Exclude unnecessary elements before saving.
  form_state_values_clean($form_state);

  $values = $form_state['values'];

  // Save the site info then remove from array to save theme info.
  foreach (element_children($form['site_information']) as $name) {
    variable_set($name, $values[$name]);
    unset($values[$name]);
  }

  // Extract the name of the theme from the submitted form values, then remove
  // it from the array so that it is not saved as part of the variable.
  $key = $values['var'];
  unset($values['var']);

  // If the user uploaded a new logo or favicon, save it to a permanent location
  // and use it in place of the default theme-provided file.
  if ($file = $values['logo_upload']) {
    unset($values['logo_upload']);
    $filename = file_unmanaged_copy($file->uri);
    $values['default_logo'] = 0;
    $values['logo_path'] = $filename;
    $values['toggle_logo'] = 1;
  }
  if ($file = $values['favicon_upload']) {
    unset($values['favicon_upload']);
    $filename = file_unmanaged_copy($file->uri);
    $values['default_favicon'] = 0;
    $values['favicon_path'] = $filename;
    $values['toggle_favicon'] = 1;
  }

  module_load_include('inc', 'system', 'system.admin');
  // If the user entered a path relative to the system files directory for
  // a logo or favicon, store a public:// URI so the theme system can handle it.
  if (!empty($values['logo_path'])) {
    $values['logo_path'] = _system_theme_settings_validate_path($values['logo_path']);
  }
  if (!empty($values['favicon_path'])) {
    $values['favicon_path'] = _system_theme_settings_validate_path($values['favicon_path']);
  }

  if (empty($values['default_favicon']) && !empty($values['favicon_path'])) {
    $values['favicon_mimetype'] = file_get_mimetype($values['favicon_path']);
  }

  variable_set($key, $values);
  drupal_set_message(t('The configuration options have been saved.'));

  cache_clear_all();
}

/**
 * Page preprocessor.
 */
function amani_global_preprocess_page(&$vars) {
  // Add breadcrumbs on some taxonomy term pages.
  if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {
    $term = taxonomy_term_load(arg(2));

    $breadcrumb = drupal_set_breadcrumb();

    switch ($term->vocabulary_machine_name) {
      case 'event_type':
        $breadcrumb[] = l(t('News & Events'), 'news-and-events');
        break;
      case 'project_location':
      case 'project_status':
        $breadcrumb[] = l(t('Programs'), 'programs');
        break;
      case 'resource_type':
      case 'theme':
        $breadcrumb[] = l(t('Resources'), 'resources');
        break;
      case 'team_member_type':
        $breadcrumb[] = l(t('About'), 'about');
        $breadcrumb[] = l(t('Team'), 'team');
        break;
    }

    drupal_set_breadcrumb($breadcrumb);
  }

  // Set custom page titles for none administrators.
  global $user;
  $is_admin = in_array('administrator', $user->roles);
  if (!$is_admin) {
    $path = current_path();
    switch ($path) {
      case 'admin/structure/contact':
        drupal_set_title('Configure Contact Form');
    }
  }

}

/**
 * Implements hook_form_alter.
 */
function amani_global_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $is_admin = in_array('administrator', $user->roles);
  if (!$is_admin) {
    // Twitter forms
    $twitter_admin_forms = array('twitter_admin_form', 'twitter_post_admin_settings', 'twitter_signin_admin_settings');
    if (in_array($form_id, $twitter_admin_forms)) {
      drupal_set_title('Twitter');
    }
  }

  // If your not a superadmin redirect to configure amani page after editing the
  // facebook feeds block.
  if ($form_id == 'block_admin_configure' && !$is_admin) {
    $form['#submit'][] = 'amani_global_redirect_for_amani_admins';
  }
}

/**
 * Custom submit handler
 */
function amani_global_redirect_for_amani_admins($form, &$form_state) {
  $form_state['redirect'] = 'admin/configure-amani';
}
