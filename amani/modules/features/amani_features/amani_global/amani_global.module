<?php
/**
 * @file
 * Code for the Amani: Global feature.
 */

include_once 'amani_global.features.inc';

/**
 * Implements hook_menu().
 */
function amani_global_menu() {

  $items['home'] = array(
    'title' => 'Home Page',
    'description' => 'Default home page.',
    'page callback' => 'amani_global_home_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $version = amani_global_get_version();

  $items['admin/configure-amani/contact'] = array(
    'title' => 'Manage Contact Settings',
    'description' => 'Manage site contact settings',
    'page callback' => 'drupal_get_form',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array('amani_global_contact_settings'),
    'access arguments' => array('administer site settings'),
    'weight' => 20,
  );

  $items['admin/configure-amani/site-info'] = array(
    'title' => 'Manage Logo & Tagline',
    'description' => 'Manage site logo and tagline',
    'page callback' => 'drupal_get_form',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array('amani_global_site_settings'),
    'access arguments' => array('administer site settings'),
    'weight' => 20,
  );

  $items['admin/configure-amani/release-notes'] = array(
    'title' => t('Release Notes', array('!version' => $version)),
    'description' => 'Amani Release Notes',
    'page callback' => 'amani_global_release_notes',
    'access arguments' => array('administer site settings'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function amani_global_permission() {
  return array(
    'administer site settings' => array(
      'title' => t('Administer site settings'),
      'description' => t('Administer the site settings form.'),
    ),
  );
}

/**
 * Home page callback.
 */
function amani_global_home_page() {
  return '';
}

/**
 * Implements hook_block_info().
 */
function amani_global_block_info() {
  return array(
    'add_content_links' => array(
      'info' => t('Amani: add content links')
    ),
    'site_contact_info' => array(
      'info' => t('Amani: site contact info')
    ),
    'behind_front_blocks_image' => array(
      'info' => t('Amani: Image behind front page blocks')
    ),
  );
}

/**
 * Redirect user to the amani admin page on login.
 */
function amani_global_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    if(count($account->roles) > 1) {
      $_GET['destination'] = 'amani/content-admin';
    }
  }
}

/**
 * Implements hook_block_view().
 */
function amani_global_block_view($delta = '') {
  switch ($delta) {
    case 'add_content_links':
      $block['content'] = amani_global_add_content_links();
      break;
    case 'site_contact_info':
      $block['title'] = t('Where are we?');
      $block['content'] = amani_global_site_contact_info();
      break;
    case 'behind_front_blocks_image':
      $content = '';
      $block['title'] = '';
      $image = file_load(variable_get('amani_global_behind_front_blocks_image_fid', NULL));
      if ($image != FALSE) {
        $content = theme('image_style', array('style_name' => 'front_page_slideshow', 'path' => $image->uri));
      }
      $block['content'] = $content;
      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function amani_global_block_configure($delta = '') {
  $form = array();
  if ($delta == 'behind_front_blocks_image') {
    $form['amani_global_behind_front_blocks_image_fid'] = array(
      '#type' => 'managed_file',
      '#title' => t('Image'),
      '#size' => 60,
      '#description' => t('This image will appear behind the front page blocks.'),
      '#default_value' => variable_get('amani_global_behind_front_blocks_image_fid', NULL),
      '#upload_location' => 'public://front_page_behind_blocks_images/',
      '#upload_validators' => array(
        'file_validate_extensions' => array('png jpg jpeg'),
        'file_validate_image_resolution' => array(0, '1440x450'),
      ),
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function amani_global_block_save($delta = '', $edit = array()) {
  if ($delta == 'behind_front_blocks_image') {
    $file = file_load($edit['amani_global_behind_front_blocks_image_fid']);
    if ($file != FALSE) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
      file_usage_add($file, 'amani_global', 'behind_front_blocks_image', $file->fid);
      variable_set('amani_global_behind_front_blocks_image_fid', $edit['amani_global_behind_front_blocks_image_fid']);
    }
  }
}

/**
 * Implements hook_block_view_alter().
 */
function amani_global_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case 'form':
      $data['content']['search_block_form']['#attributes']['placeholder'] = t('Search');
      break;

  }
}

/**
 * Return html for add_content_links block.
 */
function amani_global_add_content_links() {
  $output = '';

  // Add content links
  $item = menu_get_item('node/add');
  $content = system_admin_menu_block($item);
  if ($content) {
    $output .= '<div><span class="node-type-list">Add new content</span><ul>';
    foreach ($content as $item) {
      $output .= '<li>' . l('Add ' . $item['title'], $item['href'], $item['localized_options']) . '</li>';
    }
    $output .= '</ul><div>';
  }

  return $output;
}

/**
 * Return html for site_contact_info block.
 */
function amani_global_site_contact_info() {
  $output = '';
  $map_id = 'contact_form_map';
  $map = leaflet_framework_map($map_id, array(), array());

  $content = array(
    'Address' => variable_get('site_address', NULL)
  );
  if ($phone = variable_get('site_phone', NULL)) {
    $content['T'] = $phone;
  }
  if ($mail = variable_get('site_mail', NULL)) {
    $content['E'] = $mail;
  }
  if ($hours = variable_get('site_hours', NULL)) {
    $content['Hours'] = $hours;
  }
  if ($content) {
    $output .= '<div id="contact_form_site_info">';
    foreach ($content as $item => $value) {
      $class = '';
      if ($item === 'T') {
        $class = 'telephone';
      }
      if ($item === 'E') {
        $class = "email";
      }
      if (!empty($class)) {
        $output .= '<p class="' . $class . '">';
      }
      else {
        $output .= '<p>';
      }

      // Dont show our address label
      if ($item != 'Address' && $item != 'T' && $item != 'E') {  $output .= t($item . ': '); }
        $output .= nl2br(t($value)) . '</p>';
    }
    $output .= render($map);
    $output .='</div>';
  }

  return $output;
}

/**
 * Implements hook_leaflet_framework_plugins().
 */
function amani_global_leaflet_framework_plugins() {
  $plugins['contact_form'] = array(
    'library' => array('amani_global', 'ContactFormMap'),
    'logical' => 'AmaniGlobal.ContactForm',
    'points' => array()
  );

  return $plugins;
}


/**
 * Implementation of hook_requirements().
 */
function amani_global_requirements($phase) {
  if ('runtime' == $phase) {
    if ($version = amani_global_get_version()) {
      // Show version on status report page
      $requirements['amani_version'] = array(
        'title' => t('Amani Version'),
        'value' => $version,
        'severity' => REQUIREMENT_OK,
      );
      return $requirements;
    }
    else {
      // Show error since version not found
      $requirements['amani_version'] = array(
        'title' => t('Amani Version'),
        'value' => t('Amani Version could not be determined'),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }
  }
}


/**
 * Menu callback; Amani Release Notes
 */
function amani_global_release_notes () {
  return nl2br(file_get_contents(drupal_get_path('profile', 'amani') . '/VERSION.txt'));
}

/**
 * Get the Amani version from the VERSION.txt file
 */
function amani_global_get_version() {
  $version_path = drupal_realpath(drupal_get_path('profile', 'amani') . '/VERSION.txt');
  if (file_exists($version_path)) {
    if ($version_file = fopen($version_path, 'r')) {
      if ($version = trim(fgets($version_file))) {
        if (preg_match('/^Amani \d\.\d+/', $version)) {
          return $version;
        }
      }
      // Create watchdog error, could not identify version in VERSION.txt
      watchdog(
        'amani_global',
        'The version could not be determined from the file %file',
        array('%file' => $version_path),
        WATCHDOG_ERROR
      );
      return '';
    }
  }
  // Create watchdog error, could not open VERSION.txt
  watchdog(
    'amani_global',
    'The version could not be determined because the file %file could not be opened',
    array('%file' => $version_path),
    WATCHDOG_ERROR
  );
  return '';
}


/**
 * Implements hook_library().
 */
function amani_global_library() {
  $libararies = array();
  $path = drupal_get_path('module', 'amani_global');
  // Use libraries from pre-existing map implementation.
  $incident_map_path = drupal_get_path('module', 'incident_map');

  $libraries['ContactFormMap'] = array(
    'title' => 'Contact form map visualization',
    'version' => '7.x-1.x',
    'js' => array("$path/js/ContactForm.js" => array()),
  );

  return $libraries;
}

/**
 * Implements hook_leaflet_framework_maps().
 */
function amani_global_leaflet_framework_maps() {
  $maps = array();
  $maps['contact_form_map'] = array(
    'title' => 'Contact Form Map',
    'defaults' => array(
      'height' => '200px'
    ),
    'plugins' => array(
      'lf_layers' => array(),
      'contact_form' => array(
         'points' => array(variable_get('site_address_lat',0.0),variable_get('site_address_long',0.0))
      ),
      'lf_view' => array(
        'center' => array(variable_get('site_address_lat',0.0),variable_get('site_address_long',0.0)),
        'zoom' => 15,
      )
    )
  );

  return $maps;
}

/**
 * Form builder for 'Manage Contact Page' found via the configure amani interface.
 */
function amani_global_contact_settings($form, &$form_state) {
  // Address
  $form['site_information']['site_address'] = array(
    '#type' => 'textarea',
    '#title' => t('Address'),
    '#default_value' => variable_get('site_address', NULL),
    '#description' => t("Your organization's mailing address, this will appear on the contact form of your site."),
    '#required' => FALSE,
  );
  $options = array(
    'attributes' => array(
      'class' => array('colorbox-load'),
    ),
    'query' => array(
      'width' => '800',
      'height' => '500',
      'iframe' => 'true',
    ),
  );
  $link = l(t('Convert your address'), 'http://www.latlong.net/convert-address-to-lat-long.html', $options);
  // Lat
  $form['site_information']['site_address_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Lat'),
    '#default_value' => variable_get('site_address_lat', 0.0),
    '#description' => t('Your organizations address latitude. !link', array('!link' => $link)),
    '#required' => FALSE,
  );
  // Long
  $form['site_information']['site_address_long'] = array(
    '#type' => 'textfield',
    '#title' => t('Long'),
    '#default_value' => variable_get('site_address_long', 0.0),
    '#description' => t('Your organizations address longtitude. !link', array('!link' => $link)),
    '#required' => FALSE,
  );
  // Phone
  $form['site_information']['site_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => variable_get('site_phone', NULL),
    '#description' => t("Your organization's phone number, this will appear on the contact form of your site."),
    '#required' => FALSE,
  );
  // Email
  $form['site_information']['site_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => variable_get('site_mail', NULL),
    '#required' => FALSE,
  );
  $form['#submit'][] = 'amani_global_redirect_for_amani_admins';

  return system_settings_form($form);
}

/**
 * Form builder for 'Manage Logo & Tagline' found via the configure amani interface.
 */
function amani_global_site_settings($form, &$form_state) {
  $form = array();
  // We're going to use most of the form from the system core module 'system_theme_settings'.
  if (module_load_include('inc', 'system', 'system.admin') !== FALSE) {
    // We force theses settings for amani_zen, note the third arg.
    $form = system_theme_settings($form, $form_state, 'amani_zen');
    // Hide fields we don't need.
    $form['breadcrumb']['#access'] = FALSE;
    $form['themedev']['#access'] = FALSE;
    $form['support']['#access'] = FALSE;
    $form['theme_settings']['#access'] = FALSE;
    // Add our fields.
    // Site name
    $form['site_information']['site_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Site Name'),
      '#default_value' => variable_get('site_name', NULL),
      '#required' => FALSE,
    );
    // Slogan
    $form['site_information']['site_slogan'] = array(
      '#type' => 'textfield',
      '#title' => t('Site Tagline'),
      '#default_value' => variable_get('site_slogan', NULL),
      '#required' => FALSE,
    );
    $form['#submit'][] = 'amani_global_site_settings_submit';
    $form['#submit'][] = 'amani_global_redirect_for_amani_admins';
  }

  return $form;
}

/**
 * Custom submission handler for our custom site settings form.
 */
function amani_global_site_settings_submit($form, &$form_state) {
  variable_set('site_name', $form_state['values']['site_name']);
  variable_set('site_slogan', $form_state['values']['site_slogan']);
}

/**
 * Page preprocessor.
 */
function amani_global_preprocess_page(&$vars) {
  // Add breadcrumbs on some taxonomy term pages.
  if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {
    $term = taxonomy_term_load(arg(2));

    $breadcrumb = drupal_set_breadcrumb();

    switch ($term->vocabulary_machine_name) {
    case 'event_type':
      $breadcrumb[] = l(t('News & Events'), 'news-and-events');
      break;
    case 'project_location':
    case 'project_status':
      $breadcrumb[] = l(t('Programs'), 'programs');
      break;
    case 'resource_type':
    case 'theme':
      $breadcrumb[] = l(t('Resources'), 'resources');
      break;
    case 'team_member_type':
      $breadcrumb[] = l(t('About'), 'about');
      $breadcrumb[] = l(t('Team'), 'team');
      break;
    }

    drupal_set_breadcrumb($breadcrumb);
  }

  // Set custom page titles for none administrators.
  global $user;
  $is_admin = in_array('administrator', $user->roles);
  if (!$is_admin) {
    $path = current_path();
    switch ($path) {
    case 'admin/structure/contact':
      drupal_set_title('Configure Contact Form');
      break;
    case 'admin/config/system/googleanalytics':
      drupal_set_title('Configure Google Analytics');
      break;
    case 'admin/config/services/twitter/settings':
      drupal_set_title('Configure Twitter Feed');
      break;
    case 'redhen':
      drupal_set_title('Configure RedHen');
      break;
    case 'admin/config/development/css-injector':
      drupal_set_title('Configure CSS');
      break;
    case 'admin/structure/block/manage/fb_likebox/0/configure':
      drupal_set_title('Configure Facebook Feed');
      break;
    }
  }
}

/**
 * Implements hook_form_alter.
 */
function amani_global_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $is_admin = in_array('administrator', $user->roles);
  if (!$is_admin) {
    // Twitter forms
    $twitter_admin_forms = array('twitter_admin_form', 'twitter_post_admin_settings', 'twitter_signin_admin_settings');
    if (in_array($form_id, $twitter_admin_forms)) {
      drupal_set_title('Twitter');
    }
  }

  // If your not a superadmin redirect to configure amani page after editing the
  // facebook feeds block.
  if ($form_id == 'block_admin_configure' && !$is_admin) {
    $form['#submit'][] = 'amani_global_redirect_for_amani_admins';
  }
}

/**
 * Custom submit handler
 */
function amani_global_redirect_for_amani_admins($form, &$form_state) {
  $form_state['redirect'] = 'admin/configure-amani';
}

/**
 * Implements hook_entity_info_alter().
 */
function amani_global_entity_info_alter(&$entity_info) {

  // Custom view mode.
  $entity_info['file']['view modes']['original_image'] = array(
    'label' => t('Original Image'),
    'custom settings' => TRUE,
  );
}
