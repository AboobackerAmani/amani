<?php

require_once('amani_administrator.admin.inc');

/**
 * Implements hook_menu.
 */
function amani_administrator_menu() {
  $items = array();
  $items['admin/configure-amani'] = array(
    'title' => 'Configure Amani',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amani_administrator_configure_amani_form'),
    'access arguments' => array('access amani administrator'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'amani_administrator.admin.inc'
  );

  $items['admin/configure-amani/newsletter-button'] = array(
    'title' => 'Configure Newsletter Button',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amani_administrator_configure_newsletter_button_form'),
    'access arguments' => array('access amani administrator'),
    'type' => MENU_CALLBACK,
    'file' => 'amani_administrator.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission.
 */
function amani_administrator_permission() {
  return array(
    'access amani administrator' => array(
      'title' => t('Access amani administrator page'),
      'description' => t('Perform administrative tasks for various amani components.'),
    ),
  );
}

/**
 * Sets a specified block in a region, this only sets blocks for the peace theme.
 *
 * @param $block - an array representing the block, necessary keys are module,
 * delta and theme.
 * @param $status - the status of the block 0 = disabled, 1 = enabled
 * @param $weight - the blocks weight
 * @param $region - the blocks region a value of -1 will disable the block
 */
function amani_administrator_set_block(array $block, $status, $weight, $region) {
   db_update('block')
    ->fields(array(
      'status' => $status,
      'weight' => $weight,
      'region' => $region,
    ))
    ->condition('module', $block['module'])
    ->condition('delta', $block['delta'])
    ->condition('theme', 'peace')
    ->execute();
  // Flush cache
  cache_clear_all();
}

/**
 * Creates menu links for menu-social-media, menu-amani-main-menu and
 * menu-donate.
 */
function amani_administrator_create_menu_links($menu_machine_name) {
  $default_links = array();
  switch($menu_machine_name) {
    case 'menu-social-media':
      $default_links = amani_administrator_get_media_links();
      break;
    case 'menu-amani-main-menu':
      $default_links = amani_administrator_get_main_menu_links();
      break;
    case 'menu-donate':
      $default_links = amani_administrator_get_donate_menu_links();
      break;
    case 'menu-meta':
      $default_links = amani_administrator_get_meta_links();
      break;
    default: return;
  }
  $current_menu_links = array();
  // If we can't load the menu return the menus themselves are in features.
  if (!menu_load($menu_machine_name)) { return; }

  // We will have to consider the link title the unique identifier for the link
  // in this menu. If a link with the same title already exists we wont be
  // adding the corresponding default value.
  foreach (menu_load_links($menu_machine_name) as $link) {
    $current_menu_links[] = $link['link_title'];
  }
  foreach ($default_links as $link_title => $link) {
    if (!in_array($link_title, $current_menu_links)) {
      $link = array(
        'link_path' => $link['path'],
        'weight' => $link['weight'],
        'link_title' => $link_title,
        'menu_name' => $menu_machine_name,
      );
      menu_link_save($link);
    }
  }

  menu_cache_clear_all();
}

function amani_administrator_get_meta_links() {
  return array(
    'home' => '<front>',
    'admin' => 'amani/content-admin',
    'login' => 'user/login',
    'logout' => 'user/logout',
  );
}

function amani_administrator_get_media_links() {
  if (module_exists('amani_social_media')) {
    return array(
      'Twitter' => 'http://twitter.com',
      'Facebook' => 'http://facebook.com',
      'LinkedIn' => 'http://linkedin.com',
      'Pinterest' => 'http://pinterest.com',
      'Rss' => 'http://google.com',
      'Vimeo' => 'http://vimeo.com',
      'YouTube' => 'http://youtube.com',
      'Google+' => 'https://plus.google.com',
    );
  }

  return array();
}

function amani_administrator_get_main_menu_links() {
  $links = array();
  // Checking if the module exists is not entirely necessary
  // drupal will not create a link to path that doesn't exist.
  $links['Home'] = array('path' => '<front>', 'weight' => '-50');
  if (module_exists('amani_about')) {
    $links['About'] = array('path' => 'about', 'weight' => '-49');
  }
  if (module_exists('amani_team')) {
    $links['Team'] = array('path' => 'team', 'weight' => '-48');
  }
  if (module_exists('amani_media_gallery')) {
    $links['Image Gallery'] = array('path' => 'gallery', 'weight' => '-47');
  }
  if (module_exists('amani_partners')) {
    $links['Partners'] = array('path' => 'partners', 'weight' => '-46');
  }
  if (module_exists('amani_programs_campaigns')) {
    $links['Programs'] = array('path' => 'programs', 'weight' => '-45');
  }
  if (module_exists('amani_get_involved')) {
    $links['Get Involved'] = array('path' => 'get-involved', 'weight' => '-44');
  }
  if (module_exists('amani_resource')) {
    $links['Resources'] = array('path' => 'resources', 'weight' => '-43');
  }
  if (module_exists('amani_incident_report')) {
    $links['Map'] = array('path' => 'incident-reports', 'weight' => '-42');
  }
  if (module_exists('amani_block_and_views')) {
    $links['News & Events'] = array('path' => 'news-and-events', 'weight' => '-41');
  }
  if (module_exists('amani_blog')) {
    $links['Blog'] = array('path' => 'blog', 'weight' => '-40');
  }
  if (module_exists('contact')) {
    $links['Contact'] = array('path' => 'contact', 'weight' => '-39');
  }
  return $links;
}

function amani_administrator_get_donate_menu_links() {
  return array(
    'Donate' => '<front>'
  );
}

/**
 * Implements hook_block_view_alter.
 */
function amani_administrator_block_view_alter(&$data, $block) {
  if ($block->delta == 0 && $block->module == 'fb_likebox') {
    $show_fb_feed = variable_get('amani_admin_fb_likebox_show', 1);
    if (!$show_fb_feed) {
      $data = '';
    }
  }
}

/**
 * Implementes hook_form_alter.
 */
function amani_administrator_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case 'twitter_admin_form':
      $form['amani_admin_twitter_block_title'] = array(
        '#title' => 'Twitter feed title',
        '#type' => 'textfield',
        '#default_value' => variable_get('amani_admin_twitter_block_title', 'Twitter')
      );
      break;
  }

  return $form;
}

function amani_administrator_configure_comments($comment_en_dis) {
  $content_types = node_type_get_types();
  foreach ($content_types as $key => $val) {
    if ($comment_en_dis == 1) {
      $result = 2;
    }
    else {
      $result = 0;
    }
    db_update('node')
      ->fields(array(
        'comment' => $result,
      ))
      ->condition('type', $key)
      ->execute();
    $sql = "UPDATE node_revision nrev
            INNER JOIN node nd ON nrev.nid = nd.nid AND nd.type = :type1
            SET nrev.comment = :type2";
    $args = array(':type1' => $key, ':type2' => $result);
    db_query($sql, $args);
  }
  cache_clear_all();
}

function amani_administrator_configure_front_page_feed_types($feed, $enable, $title = null) {
  $view_name = 'news_and_events';
  $view_display_name = 'block_' . $feed;
  $view = views_get_view($view_name);
  $view->display[$view_display_name]->display_options['enabled'] = $enable;
  if ($title != null) {
    $view->display[$view_display_name]->display_options['title'] = $title;
  }
  views_save_view($view);
}

function amani_administrator_configure_partners_carousel($enable) {
  $view_name = 'partners_carousel';
  $view_display_name = 'block';
  $view = views_get_view($view_name);
  $view->display[$view_display_name]->display_options['enabled'] = $enable;
  views_save_view($view);
}

function amani_administrator_configure_front_page_feed_order($weights) {
  $context = context_load('front_page');
  $blocks = $context->reactions['block']['blocks'];
  foreach ($weights as $key => $weight) {
    $blocks['views-news_and_events-block_' . $key]['weight'] = $weight;
  }
  $context->reactions['block']['blocks'] = $blocks;
  context_save($context);
}
