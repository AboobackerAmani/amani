<?php

/**
 * Implements hook_menu.
 */
function amani_administrator_menu() {
  $items = array();
  $items['admin/configure-amani'] = array(
    'title' => 'Configure amani',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amani_administrator_configure_amani_form'),
    'access arguments' => array('access amani administrator'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Implements hook_permission.
 */
function amani_administrator_permission() {
  return array(
    'access amani administrator' => array(
      'title' => t('Access amani administrator page'),
      'description' => t('Perform administrative tasks for various amani components.'),
    ),
  );
}

function amani_administrator_configure_amani_form() {
  $form = array();
  // prefixes used to split the fieldsets into columns so we
  // can add help text (the suffix).
  $prefix = '<div style="width: 30%; display: inline-block; vertical-align: top; padding: 15px 0px 0px 10px">';
  $form['social_media_menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Social Media Menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['social_media_menu'][] = array(
    '#type' => 'button',
    '#value' => t('Reset Default Links'),
    '#attributes' => array('onclick' => 'if(!confirm("Are you sure?")){return false;}'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action enables all <a href="http://projectamani.org/content/social-media-icons">default social media icons</a>
      and will also restore all default social media links and icons</p></div>',
  );

  $form['social_media_menu'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Social Media Icons'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' =>
    '<p>This action allows users to:
      <ul style="margin-left:20px">
        <li>enable, disable, add or delete default icons found <a href="http://projectamani.org/content/social-media-icons">here</a></li>
        <li>link icons to organization-specific pages</li>
        <li>set icon ordering</li>
      </ul>
     </p>
    </div>',
  );

  $form['main_menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Main Menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['main_menu'][] = array(
    '#type' => 'button',
    '#value' => t('Reset Default Menu Links'),
    '#attributes' => array('onclick' => 'if(!confirm("Are you sure?")){return false;}'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action resets and enables all <a href="http://projectamani.org/content/edit-main-menu-links">default main menu labels</a> 
      and links and restores default links to default views and pages.</p></div>',
  );

  $form['main_menu'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Main Menu Links'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' =>
    '<p>This action allows users to:
      <ul style="margin-left:20px">
        <li>Enable, disable or delete any menu links</li>
        <li>Set menu links </li>
        <li>Establish menu ordering and manage sub-menus</li>
      </ul>
     </p>
    </div>',
  );

  $form['donate_menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Donate Button'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['donate_menu'][] = array(
    '#type' => 'button',
    '#value' => t('Enable \'Donate\' Button'),
    '#attributes' => array('onclick' => 'if(!confirm("Are you sure?")){return false;}'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action enables a ‘Donate’ button to appear on your site, as a dynamically scrolling button on the right side of your page.</p></div>',
  );

  $form['donate_menu'][] = array(
    '#type' => 'button',
    '#value' => t('Configure \'Donate\' Button'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action allows users to enable, disable or delete your ‘Donate’ button and set your ‘Donate’ button link.</p></div>',
  );

  $form['permissions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Set User Permissions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['permissions'][] = array(
    '#type' => 'button',
    '#value' => t('Set Default Permissions'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>By clicking \'Set Default Permissions\', you ensure that default permissions are restored. Please note that this 
      action does not delete any permissions.</p></div>',
  );

  $form['permissions'][] = array(
    '#type' => 'button',
    '#value' => t('Clear and Set Default Permissions'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>By clicking \'Clear & Set Default Permissions\', you will remove any custom permissions you may have created and will 
      restore all <a href="http://projectamani.org/content/amani-users-and-roles">default permissions</a>.</p></div>',
  );

  $form['blocks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Amani Blocks'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['blocks']['newsletter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Newsletter Button'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['blocks']['newsletter'][] = array(
    '#type' => 'button',
    '#value' => t('Enable \'Newsletter\' Button'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action enables the ‘Newsletter’ button on your site, this button appears in the right sidebar of your page.</p></div>',
  );

  $form['blocks']['newsletter'][] = array(
    '#type' => 'button',
    '#value' => t('Disable \'Newsletter\' Button'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action disables the ‘Newsletter’ button on your site, this button appears in the right sidebar of your page.</p></div>',
  );

  $form['blocks']['newsletter'][] = array(
    '#type' => 'button',
    '#value' => t('Configure \'Newsletter\' Button'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action allows users to set your ‘Newsletter’ button link.</p></div>',
  );

  $form['blocks']['carousel'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Partners Carousel'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['blocks']['carousel'][] = array(
    '#type' => 'button',
    '#value' => t('Enable \'Partners Carousel\''),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action enables a ‘Partners Carousel’ to appear on your site, as a scrolling bar at the bottom of 
      your page. Please note without partner content you will not see this block.</p></div>',
  );

  $form['blocks']['carousel'][] = array(
    '#type' => 'button',
    '#value' => t('Disable \'Partners Carousel\''),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>This action diables the \'Partners Carousel\' on your site.</p></div>',
  );

  $form['site-info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Logo and Header'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['site-info'][] = array(
    '#type' => 'button',
    '#value' => t('Manage Logo and Header'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' =>
    '<p>Users can manage Global settings, including:
      <ul style="margin-left:20px">
        <li>Setting your ‘Site Name’ as it appears on the opt of your web browser</li>
        <li>Setting or editing your site’s ‘Tagline’ to the right of the logo in your site header</li>
        <li>Upload your organization’s logo and favicon</li>
        <li>Setting your office location map</li>
      </ul>
     </p>
    </div>',
  );

  $form['contact-info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Contact Page Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['contact-info'][] = array(
    '#type' => 'button',
    '#value' => t('Manage Contact Page'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' =>
    '<p>Users can manage Contact page settings, including:
      <ul style="margin-left:20px">
        <li>Setting the default Email Address, Address, Phone</li>
      </ul>
     </p>
    </div>',
  );

  $form['contact-info'][] = array(
    '#type' => 'button',
    '#value' => t('Set Contact Page Form Categories & Contact Recipients'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' =>
    '<p>This option allows you to add new categories for the ‘Contact Form’ (e.g. General Inquiries, Donation Inquiries, Volunteer with Us, 
      Website Feedback, etc.) and customize the set of recipients for each category type on your site’s default Contact page. 
      Please note that your site comes with one default category ‘General Inquiries.’ When there is only one ‘Category’, there is no ‘Category’ 
      dropdown list. This dropdown option will appear as soon as you add a second ‘Category’ option.</p></div>'
  );

  $form['map'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configure Map Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['map'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Map'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' =>
    '<p>\'Configure Map Settings\' allows users to:
      <ul style="margin-left:20px">
        <li>Customize Map Page title and map record labels</li>
        <li>Manage Map Settings to either fit all records to the map or to cover a specific geographic area</li>
        <li>Manage and customize map filter options, including date and category filters</li>
        <li>Manage and customize map marker colors and icons</li>
      </ul>
     </p>
    </div>',
  );

  $form['google'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Google Analytics'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['google'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Google Analytics'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>Manage Google Analytics settings, including tracking for pages, roles and users.</p></div>',
  );

  $form['twitter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Twitter Feed (Home Page)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['twitter'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Twitter Feed'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>Enable and manage your organization’s Twitter feed, located on your Home page</p></div>',
  );

  $form['facebook'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configure Facebook Feed (Home Page)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['facebook'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Facebook Feed'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>Enable and manage your organization’s Facebook feed, located on your Home page.</p></div>',
  );

  $form['redhen'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage RedHen CRM'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['redhen'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Redhen'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p><a href="https://www.drupal.org/project/redhen">RedHen CRM</a> is an open source CRM framework built in <a href="https://www.drupal.org/">Drupal</a>. 
      RedHen CRM is packed with <a href="http://en.wikipedia.org/wiki/Association_management_system">association management</a> (AMS) features for managing detailed information on Contacts and Organizations, Membership services, Event registrations, and 
      Constituent engagement.</p></div>',
  );

  $form['css'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create and Manage CSS Overrides'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['css'][] = array(
    '#type' => 'button',
    '#value' => t('Configure Css'),
    '#executes_submit_callback' => TRUE,
    '#prefix' => $prefix,
    '#suffix' => '<p>Users can manage text and button colors, add effects (such as shadows) to set elements, and otherwise manage the visual aspects of your site by creating CSS rules that override the default CSS code. Click here for a list of frequently used overrides.</p></div>',
  );

  return $form;
}

function amani_administrator_configure_amani_form_submit($form, &$form_state) {
  switch ($form_state['clicked_button']['#value']) {
    case 'Reset Default Links':
      amani_administrator_create_menu_links('menu-social-media');
      drupal_set_message('Menu link paths can now be configured ' . l('here', 'admin/structure/menu/manage/menu-social-media'));
      break;
    case 'Reset Default Menu Links':
      amani_administrator_create_menu_links('menu-amani-main-menu');
      drupal_set_message('Menu link paths can now be configured ' . l('here', 'admin/structure/menu/manage/menu-amani-main-menu'));
      break;
    case 'Enable \'Donate\' Button':
      amani_administrator_create_menu_links('menu-donate');
      drupal_set_message('Menu link paths can now be configured ' . l('here', 'admin/structure/menu/manage/menu-donate'));
      break;
    case 'Configure Social Media Icons':
      drupal_goto('admin/structure/menu/manage/menu-social-media');
      break;
    case 'Configure Main Menu Links':
      drupal_goto('admin/structure/menu/manage/menu-amani-main-menu');
      break;
    case 'Configure \'Donate\' Button':
      drupal_goto('admin/structure/menu/manage/menu-donate');
      break;
    case 'Enable \'Partners Carousel\'':
      // Partners carousel block.
      $block = array(
        'module' => 'views',
        'delta' => 'partners_carousel-block',
      );
      amani_administrator_set_block($block, 1, 0, 'content_bottom');
      break;
    case 'Disable \'Partners Carousel\'':
      // Partners carousel block.
      $block = array(
        'module' => 'views',
        'delta' => 'partners_carousel-block',
      );
      amani_administrator_set_block($block, 0, 0, -1);
      break;
    case 'Configure \'Newsletter\' Button':
      drupal_goto('block/front-page-second-sidebar-bottom/edit');
      break;
    case 'Disable \'Newsletter\' Button':
      amani_administrator_alter_front_page_context('disable');
      break;
    case 'Enable \'Newsletter\' Button':
      amani_administrator_alter_front_page_context('enable');
      break;
    case 'Manage Logo and Header':
      drupal_goto('admin/configure-amani/site-info');
      break;
    case 'Manage Contact Page':
      drupal_goto('contact');
      break;
    case 'Configure Map':
      drupal_goto('admin/config/incident-reports');
      break;
    case 'Configure Google Analytics':
      drupal_goto('admin/config/system/googleanalytics');
      break;
    case 'Configure Twitter Feed':
      drupal_goto('admin/config/services/twitter/settings');
      break;
    case 'Configure Facebook Feed':
      drupal_goto('admin/structure/block/manage/fb_likebox/0/configure');
      break;
    case 'Configure Redhen':
      drupal_goto('redhen');
      break;
    case 'Set Contact Page Form Categories & Contact Recipients':
      drupal_goto('admin/structure/contact');
      break;
    case 'Configure Css':
      drupal_goto('admin/config/development/css-injector');
      break;
    case 'Set Default Permissions':
      //See amani.profile
      amani_setup_roles_and_permissions();
      break;
    case 'Clear and Set Default Permissions':
      amani_administrator_clear_permissions();
      break;
  }
}

/**
 * Removes the show newsletter block condition from the front page context.
 * Do not alter or try and use outside of this module.
 *
 * @param $op default value adds the block 'disable' removes it.
 */
function amani_administrator_alter_front_page_context($op) {
  // Hardcoded values, this function is not designed to be used from outside
  // this module.
  $context = context_load('front_page');
  $block_name = 'bean-front-page-second-sidebar-bottom';

  if (!$context) {
    return;
  }
  // If this reaction already exists and the operation is to enable it, return.
  if (array_key_exists($block_name, $context->reactions['block']['blocks']) && $op == 'enable') {
    return;
  }
  // If this reaction does not exist and the operation is to disable it, return.
  if (!(array_key_exists($block_name, $context->reactions['block']['blocks'])) && $op == 'disable') {
    return;
  }

  if ($op == 'disable') {
    unset($context->reactions['block']['blocks'][$block_name]);
  }
  elseif ($op == 'enable') {
    $context->reactions['block']['blocks'][$block_name] = array(
      'module' => 'bean',
      'delta' => 'front-page-second-sidebar-bottom',
      'region' => 'sidebar_second',
      'weight' => '-7'
    );
  }

  context_save($context);
}

/**
 * Sets a specified block in a region, this only sets blocks for the peace theme.
 *
 * @param $block - an array representing the block, necessary keys are module,
 * delta and theme.
 * @param $status - the status of the block 0 = disabled, 1 = enabled
 * @param $weight - the blocks weight
 * @param $region - the blocks region a value of -1 will disable the block
 */
function amani_administrator_set_block(array $block, $status, $weight, $region) {
   db_update('block')
    ->fields(array(
      'status' => $status,
      'weight' => $weight,
      'region' => $region,
    ))
    ->condition('module', $block['module'])
    ->condition('delta', $block['delta'])
    ->condition('theme', 'peace')
    ->execute();
  // Flush cache
  cache_clear_all();
}

/**
 * Creates menu links for menu-social-media, menu-amani-main-menu and
 * menu-donate.
 */
function amani_administrator_create_menu_links($menu_machine_name) {
  $default_links = array();
  switch($menu_machine_name) {
    case 'menu-social-media':
      $default_links = amani_administrator_get_media_links();
      break;
    case 'menu-amani-main-menu':
      $default_links = amani_administrator_get_main_menu_links();
      break;
    case 'menu-donate':
      $default_links = amani_administrator_get_donate_menu_links();
      break;
    default: return;
  }
  $current_menu_links = array();
  // We will have to consider the link title the unique identifier for the link
  // in this menu. If a link with the same title already exists we wont be
  // adding the corresponding default value.
  foreach (menu_load_links($menu_machine_name) as $link) {
    $current_menu_links[] = $link['link_title'];
  }
  foreach ($default_links as $title => $path) {
    if (!in_array($title, $current_menu_links)) {
      $link = array('link_path' => $path,'link_title' => $title,'menu_name' => $menu_machine_name);
      menu_link_save($link);
    }
  }

  menu_cache_clear_all();
}

function amani_administrator_get_media_links() {
  if (module_exists('amani_social_media')) {
    return array(
      'Twitter' => 'http://twitter.com',
      'Facebook' => 'http://facebook.com',
      'LinkedIn' => 'http://linkedin.com',
      'Pinterest' => 'http://pinterest.com',
      'Rss' => 'http://google.com',
      'Vimeo' => 'http://vimeo.com',
      'YouTube' => 'http://youtube.com',
      'Google+' => 'https://plus.google.com',
    );
  }

  return array();
}

function amani_administrator_get_main_menu_links() {
  $links = array();
  // Checking if the module exists is not entirely necessary
  // drupal will not create a link to path that doenst exist.
  if (module_exists('amani_about')) {
    $links['About'] = 'about';
  }
  if (module_exists('amani_team')) {
    $links['Team'] = 'team';
  }
  if (module_exists('amani_media_gallery')) {
    $links['Image Gallery'] = 'gallery';
  }
  if (module_exists('amani_partners')) {
    $links['Partners'] = 'partners';
  }
  if (module_exists('amani_programs_campaigns')) {
    $links['Programs'] = 'programs';
  }
  if (module_exists('amani_get_involved')) {
    $links['Get Involved'] = 'get-involved';
  }
  if (module_exists('amani_resource')) {
    $links['Resources'] = 'resources';
  }
  if (module_exists('amani_incident_report')) {
    $links['Map'] = 'incident-reports';
  }
  if (module_exists('amani_block_and_views')) {
    $links['News & Events'] = 'news-and-events';
  }
  if (module_exists('amani_blog')) {
    $links['Blog'] = 'blog';
  }
  if (module_exists('contact')) {
    $links['Contact'] = 'contact';
  }
  return $links;
}

function amani_administrator_get_donate_menu_links() {
  return array(
    'Donate' => '<front>'
  );
}

function amani_administrator_clear_permissions() {
  // The amani roles
  $roles = array('anonymous user', 'authenticated user', 'contributor', 'editor', 'amani administrator');
  // Remove permissions
  foreach($roles as $role) {
    $role_obj = user_role_load_by_name($role);
    if($role_obj) {
      $roles_array = array($role_obj->rid => $role_obj->name);
      $urp = user_role_permissions($roles_array);
      $perms_array = array_keys($urp[$role_obj->rid]);
      user_role_revoke_permissions($role_obj->rid, $perms_array);
    }
  }
  // Set default roles/permissions(see amani.profile)
  amani_setup_roles_and_permissions();
}

function amani_administrator_fieldset() {

}
