// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

@mixin hide-text {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

// Use REMs with a pixel fallback for font sizing.
@mixin font-size($font-size) {
  font-size: $font-size;
  font-size: ($font-size / $base-font-size) * 1rem;
}

// Style for a button
@mixin button-style($color: $white, $bg-color: $grey-dark) {
  background-color: $bg-color;
  border: 0 none;
  border-radius: 0;
  color: $color;
  display: inline-block;
  font-weight: $fw-light;
  padding: 5px 10px;

  &:hover,
  &:focus {
    background-color: lighten($bg-color, 10%);
  }
}

// Hover state for link
@mixin link-hover-color($color: $link-color-hover) {
  &:focus,
  &:hover,
  &:active {
    color: $color;
  }
}

// Hide contextual links
@mixin hide-contextual-links {
  &:hover .contextual-links-wrapper { display: none; }
}

// Symbol set icon social
@mixin ss-icon($type: 'regular') {
  font-family: "SSSocial";
  font-style: normal;
  @if $type == circle {
    font-weight: bold;
  } @else {
    font-weight: normal;
  }
  text-decoration: none;
  text-rendering: optimizeLegibility;
  white-space: nowrap;
  /*-webkit-font-feature-settings: "liga"; Currently broken in Chrome >= v22. Falls back to text-rendering. Safari is unaffected. */
  -moz-font-feature-settings: "liga=1";
  -moz-font-feature-settings: "liga";
  -ms-font-feature-settings: "liga" 1;
  -o-font-feature-settings: "liga";
  font-feature-settings: "liga";
  -webkit-font-smoothing: antialiased;
}


/*
 * Mobile First approach to break points
 *
 * http://responsivedesign.is/strategy/page-layout/defining-breakpoints
 * TL;DR
 * Instead of being concerned with device breakpoints the best practice is to
 * design for your smallest viewport first.  As you expand that view there will
 * come a point at which the design looks terrible.
 *
 * This is where you add a break point.
 */

@mixin breakpoint($width) {
  @media (min-width: $width) {
    @content;
  }
}

//Read  More text link
@mixin readmore {
  font-family: $open-sans-condensed;
  font-size: 14px;
  font-weight: bold;
  text-transform: uppercase;
  color: $purple-primary;
  letter-spacing: 0.5px;
  display: block;
  padding: 5px 0 10px;
  
  &:after {
    content: "\f101";
    font-family: amani-icons;
    font-size: 16px;
    font-weight: normal;
    display: inline-block;
    color: $purple-primary;
    margin-left: 5px;
    position: relative;
    top: 2px;
  }
}

//Button
@mixin btn {
  font-family: "Open Sans Condensed",sans-serif;
  background: $purple-primary;
  border: 1px solid $purple-primary;
  color:$white;
  float: left;
  font-size: 17px;
  height: 30px;
  letter-spacing: 1px;
  line-height: 1;
  padding: 0;
  text-transform: uppercase;
}

@mixin secon-btn {
  @include btn;
  background: transparent;
  color:$purple-primary;
}